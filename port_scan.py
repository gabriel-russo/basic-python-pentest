from sys import argv, stdout
from socket import socket, AF_INET, SOCK_STREAM
from re import match, compile

def test_port(ip, port):
    try:
        with socket(AF_INET, SOCK_STREAM) as sock:
            sock.settimeout(0.5)
            if sock.connect_ex((ip, port)) == 0: # If port Responds...
                return True
            else:
                return False
    except Exception:
        pass

ip_pattern = compile(r'([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})')

if argv[1] is None:
    raise ValueError("Argument with IP is needed")
elif match(ip_pattern, argv[1]) is None:
    raise TypeError("Invalid parameter! Must be an IP")
else:
    ip = argv[1]

open_ports = []

for port in range(1,65535):
    stdout.flush()
    if test_port(ip, port) is True:
        print("Found open port: ", port)
        open_ports.append(port)

print ("No ports are open!" if not open_ports else f"Summary of open ports: {sorted(open_ports)}")
